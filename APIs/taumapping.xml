<?xml version="1.0"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
                 "../tools/docbook-xml-4.4/docbookx.dtd"> 
<reference>
	
  <title>TAU Mapping API</title>
  
  <partintro>


  <simplesect>
    <title>Introduction</title>

      <para>TAU allows the user to map performance data of entities from one
      layer to another in multi-layered software. Mapping is used in profiling
      (and tracing) both synchronous and asynchronous models of
      computation.</para>

      <para>For mapping, the following macros are used.  First locate and
      identify the higher-level statement using the <xref linkend="TAU_MAPPING"
      /> macro. Then, associate a function identifier with it using the <xref
      linkend="TAU_MAPPING_OBJECT" />.  Associate the high level statement to a
      FunctionInfo object that will be visible to lower level code, using <xref
      linkend="TAU_MAPPING_LINK" />, and then profile entire blocks using <xref
      linkend="TAU_MAPPING_PROFILE" />. Independent sets of statements can be
      profiled using <xref linkend="TAU_MAPPING_PROFILE_TIMER"/>, <xref
      linkend="TAU_MAPPING_PROFILE_START" />, and <xref
      linkend="TAU_MAPPING_PROFILE_STOP" /> macros using the FunctionInfo
      object.</para>

      <para>The TAU <filename>examples/mapping</filename> directory has two
      examples (embedded and external) that illustrate the use of this mapping
      API for generating object-oriented profiles.</para>


  </simplesect>
  </partintro>
  

<refentry id="TAU_MAPPING">
  <refmeta>
    <refentrytitle>TAU_MAPPING</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv><refname>TAU_MAPPING</refname>
  <refpurpose>Encapsulates a C++ statement for profiling</refpurpose></refnamediv>
  
  <refsynopsisdiv>
    <funcsynopsis><funcsynopsisinfo>C/C++:</funcsynopsisinfo>
    <funcprototype>
      <funcdef><function>TAU_MAPPING</function></funcdef>
      <paramdef>statement <parameter>statement</parameter></paramdef>
      <paramdef>TauGroup_t <parameter>key</parameter></paramdef>
    </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>

  
  <refsect1><title>Description</title>
    <para><literal>TAU_MAPPING</literal> is used to encapsulate a C++ statement
    as a timer.  A timer will be made, named by the statment, and will profile
    the statement.  The key given can be used with <xref
    linkend="TAU_MAPPING_LINK" /> to retrieve the timer.</para>
  </refsect1>
  
  <refsect1><title>Example</title>
    
    <para><emphasis role="bold">C/C++ :</emphasis></para>
    <screen>
int main(int argc, char **argv) {
  Array &lt;2&gt; A(N, N), B(N, N), C(N,N), D(N, N);
  // Original statement:
  // A = B + C + D;
  //Instrumented statement:
  TAU_MAPPING(A = B + C + D; , TAU_USER);
  ... 
}
    </screen>
  </refsect1>

  <refsect1>
    <title>See Also</title>
    <para>
      <xref linkend="TAU_MAPPING_CREATE" />,
      <xref linkend="TAU_MAPPING_LINK" />
    </para>
  </refsect1>

</refentry>


<refentry id="TAU_MAPPING_CREATE">
  <refmeta>
    <refentrytitle>TAU_MAPPING_CREATE</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv><refname>TAU_MAPPING_CREATE</refname>
  <refpurpose>Creates a mapping</refpurpose></refnamediv>
  
  <refsynopsisdiv>
    <funcsynopsis><funcsynopsisinfo>C/C++:</funcsynopsisinfo>
    <funcprototype>
      <funcdef><function>TAU_MAPPING_CREATE</function></funcdef>
      <paramdef>char *<parameter>name</parameter></paramdef>
      <paramdef>char *<parameter>type</parameter></paramdef>
      <paramdef>char *<parameter>groupname</parameter></paramdef>
      <paramdef>unsigned long <parameter>key</parameter></paramdef>
      <paramdef>int <parameter>tid</parameter></paramdef>
    </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>

  
  <refsect1><title>Description</title>
    <para><literal>TAU_MAPPING_CREATE</literal> creates a mapping and
    associates it with the key that is specified.  Later, this key may be used
    to retrieve the FunctionInfo object associated with this key for timing
    purposes. The thread identifier is specified in the <literal>tid</literal>
    parameter.</para>
  </refsect1>
  
  <refsect1><title>Example</title>
    
    <para><emphasis role="bold">C/C++ :</emphasis></para>
    <screen>
class MyClass {
  public:
    MyClass() {
      TAU_MAPPING_LINK(runtimer, TAU_USER); 
    } 
    ~MyClass() {}

    void Run(void) {
      TAU_MAPPING_PROFILE(runtimer); // For one object
      TAU_PROFILE("MyClass::Run()", " void (void)", TAU_USER1);
	
      cout &lt;&lt;"Sleeping for 2 secs..."&lt;&lt;endl;
      sleep(2);
    }
  private:
    TAU_MAPPING_OBJECT(runtimer)  // EMBEDDED ASSOCIATION
};

int main(int argc, char **argv) {
  TAU_PROFILE_INIT(argc, argv);
  TAU_PROFILE("main()", "int (int, char **)", TAU_DEFAULT);
  MyClass x, y, z;
  TAU_MAPPING_CREATE("MyClass::Run() for object a", " " , TAU_USER, 
                     "TAU_USER", 0);
  MyClass a;
  TAU_PROFILE_SET_NODE(0);
  cout &lt;&lt;"Inside main"&lt;&lt;endl;

  a.Run();
  x.Run();
  y.Run();
}
    </screen>
  </refsect1>

  <refsect1>
    <title>See Also</title>
    <para>
      <xref linkend="TAU_MAPPING_LINK" />,
      <xref linkend="TAU_MAPPING_OBJECT" />,
      <xref linkend="TAU_MAPPING_PROFILE" />
    </para>
  </refsect1>

</refentry>


<refentry id="TAU_MAPPING_LINK">
  <refmeta>
    <refentrytitle>TAU_MAPPING_LINK</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv><refname>TAU_MAPPING_LINK</refname>
  <refpurpose>Creates a mapping link</refpurpose></refnamediv>
  
  <refsynopsisdiv>
    <funcsynopsis><funcsynopsisinfo>C/C++:</funcsynopsisinfo>
    <funcprototype>
      <funcdef><function>TAU_MAPPING_LINK</function></funcdef>
      <paramdef>FunctionInfo <parameter>FuncIdVar</parameter></paramdef>
      <paramdef>unsigned long <parameter>Key</parameter></paramdef>
    </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>

  
  <refsect1><title>Description</title>
    <para><literal>TAU_MAPPING_LINK </literal>creates a link between
    the object defined in <literal>TAU_MAPPING_OBJECT</literal> (that
    identifies a statement) and the actual higher-level statement that is
    mapped with <literal>TAU_MAPPING</literal>. The Key argument represents a
    profile group to which the statement belongs, as specified in the
    <literal>TAU_MAPPING</literal> macro argument. For the example of array
    statements, this link should be created in the constructor of the class
    that represents the expression. <literal>TAU_MAPPING_LINK</literal>
    should be executed before any measurement takes place. It assigns the
    identifier of the statement to the object to which FuncIdVar refers. For
    example</para>
  </refsect1>
  
  <refsect1><title>Example</title>
    
    <para><emphasis role="bold">C/C++ :</emphasis></para>
    <screen>
class MyClass {
  public:
    MyClass() { }
    ~MyClass() { }

    void Run(void) {
      TAU_MAPPING_OBJECT(runtimer)
      TAU_MAPPING_LINK(runtimer, (unsigned long) this);
      TAU_MAPPING_PROFILE(runtimer); // For one object
      TAU_PROFILE("MyClass::Run()", " void (void)", TAU_USER1);
      
      /* ... */
    }
};

int main(int argc, char **argv) {
  TAU_PROFILE_INIT(argc, argv);
  TAU_PROFILE("main()", "int (int, char **)", TAU_DEFAULT);
  MyClass x, y, z;
  MyClass a;
  TAU_MAPPING_CREATE("MyClass::Run() for object a", " " , 
                     (TauGroup_t) &amp;a, "TAU_USER", 0);
  TAU_MAPPING_CREATE("MyClass::Run() for object x", " " , 
                     (TauGroup_t) &amp;x, "TAU_USER", 0);
  TAU_PROFILE_SET_NODE(0);
  cout &lt;&lt;"Inside main"&lt;&lt;endl;

  a.Run();
  x.Run();
  y.Run();


    </screen>
  </refsect1>

  <refsect1>
    <title>See Also</title>
    <para>
      <xref linkend="TAU_MAPPING_CREATE" />,
      <xref linkend="TAU_MAPPING_OBJECT" />,
      <xref linkend="TAU_MAPPING_PROFILE" />
    </para>
  </refsect1>

</refentry>


<refentry id="TAU_MAPPING_OBJECT">
  <refmeta>
    <refentrytitle>TAU_MAPPING_OBJECT</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv><refname>TAU_MAPPING_OBJECT</refname>
  <refpurpose>Declares a mapping object</refpurpose></refnamediv>
  
  <refsynopsisdiv>
    <funcsynopsis><funcsynopsisinfo>C/C++:</funcsynopsisinfo>
    <funcprototype>
      <funcdef><function>TAU_MAPPING_OBJECT</function></funcdef>
      <paramdef>FunctionInfo <parameter>FuncIdVar</parameter></paramdef>
    </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>

  
  <refsect1><title>Description</title>
    <para>To create storage for an identifier associated with a higher
    level statement that is mapped using <literal>TAU_MAPPING</literal>, we
    use the <literal>TAU_MAPPING_OBJECT</literal> macro. For example, in the
    <literal>TAU_MAPPING</literal> example, the array expressions are
    created into objects of a class ExpressionKernel, and each statement is
    an object that is an instance of this class. To embed the identity of
    the statement we store the mapping object in a data field in this class.
    This is shown below:</para>
  </refsect1>
  
  <refsect1><title>Example</title>
    
    <para><emphasis role="bold">C/C++ :</emphasis></para>
    <screen>
template&lt;class LHS,class Op,class RHS,class EvalTag&gt;
class ExpressionKernel : public Pooma::Iterate_t {
  public:
      
    typedef ExpressionKernel&lt;LHS,Op,RHS,EvalTag&gt; This_t;
    //
    // Construct from an Expr.
    // Build the kernel that will evaluate the expression on the 
    // given domain.
    // Acquire locks on the data referred to by the expression.
    //
    ExpressionKernel(const LHS&amp;,const Op&amp;,const RHS&amp;,
    Pooma::Scheduler_t&amp;);
      
      
    virtual ~ExpressionKernel();
    
    // Do the loop.
    virtual void run();
    
  private:
      
    // The expression we will evaluate.
    LHS lhs_m;
    Op  op_m;
    RHS rhs_m;
    TAU_MAPPING_OBJECT(TauMapFI)
};
    </screen>
  </refsect1>


  <refsect1>
    <title>See Also</title>
    <para>
      <xref linkend="TAU_MAPPING_CREATE" />,
      <xref linkend="TAU_MAPPING_LINK" />,
      <xref linkend="TAU_MAPPING_PROFILE" />
    </para>
  </refsect1>

</refentry>



<refentry id="TAU_MAPPING_PROFILE">
  <refmeta>
    <refentrytitle>TAU_MAPPING_PROFILE</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv><refname>TAU_MAPPING_PROFILE</refname>
  <refpurpose>Profiles a block based on a mapping</refpurpose></refnamediv>
  
  <refsynopsisdiv>
    <funcsynopsis><funcsynopsisinfo>C/C++:</funcsynopsisinfo>
    <funcprototype>
      <funcdef><function>TAU_MAPPING_PROFILE</function></funcdef>
      <paramdef>FunctionInfo *<parameter>FuncIdVar</parameter></paramdef>
    </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>

  
  <refsect1><title>Description</title>
    <para>The <literal>TAU_MAPPING_PROFILE</literal> macro measures the
    time and attributes it to the statement mapped in
    <literal>TAU_MAPPING</literal> macro. It takes as its argument the
    identifier of the higher level statement that is stored using
    <literal>TAU_MAPPING_OBJECT</literal> and linked to the statement using
    <literal>TAU_MAPPING_LINK</literal> macros. 
    <literal>TAU_MAPPING_PROFILE</literal> measures the time spent in the
    entire block in which it is invoked. For example, if the time spent in
    the run method of the class does work that must be associated with the
    higher-level array expression, then, we can instrument it as
    follows:</para>
  </refsect1>
  
  <refsect1><title>Example</title>
    
    <para><emphasis role="bold">C/C++ :</emphasis></para>
    <screen>
// Evaluate the kernel
// Just tell an InlineEvaluator to do it.
      
template&lt;class LHS,class Op,class RHS,class EvalTag&gt;
void
ExpressionKernel&lt;LHS,Op,RHS,EvalTag&gt;::run() {
  TAU_MAPPING_PROFILE(TauMapFI)
      
  // Just evaluate the expression.
  KernelEvaluator&lt;EvalTag&gt;().evalate(lhs_m,op_m,rhs_m);
  // we could release the locks here or in dtor 
}
    </screen>
  </refsect1>

  <refsect1>
    <title>See Also</title>
    <para>
      <xref linkend="TAU_MAPPING_CREATE" />,
      <xref linkend="TAU_MAPPING_LINK" />,
      <xref linkend="TAU_MAPPING_OBJECT" />
    </para>
  </refsect1>

</refentry>



<refentry id="TAU_MAPPING_PROFILE_START">
  <refmeta>
    <refentrytitle>TAU_MAPPING_PROFILE_START</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv><refname>TAU_MAPPING_PROFILE_START</refname>
  <refpurpose>Starts a mapping timer</refpurpose></refnamediv>
  
  <refsynopsisdiv>
    <funcsynopsis><funcsynopsisinfo>C/C++:</funcsynopsisinfo>
    <funcprototype>
      <funcdef><function>TAU_MAPPING_PROFILE_START</function></funcdef>
      <paramdef>Profiler <parameter>timer</parameter></paramdef>
      <paramdef>int <parameter>tid</parameter></paramdef>
    </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>

  
  <refsect1><title>Description</title>
    <para><literal>TAU_MAPPING_PROFILE_START</literal> starts the
    timer that is created using
    <literal>TAU_MAPPING_PROFILE_TIMER</literal>. This will measure the
    elapsed time in groups of statements, instead of the entire block. A
    corresponding stop statement stops the timer as described next. The
    thread identifier is specified in the tid parameter.</para>
  </refsect1>
  
  <refsect1><title>Example</title>
    
    <para><emphasis role="bold">C/C++ :</emphasis></para>
    <screen>
template&lt;class LHS,class Op,class RHS,class EvalTag&gt;
void
ExpressionKernel&lt;LHS,Op,RHS,EvalTag&gt;::run() {
  TAU_MAPPING_PROFILE_TIMER(timer, TauMapFI);
  printf("ExpressionKernel::run() this = 4854\n", this);
  // Just evaluate the expression.
  
  TAU_MAPPING_PROFILE_START(timer);
  KernelEvaluator&lt;EvalTag&gt;().evaluate(lhs_m, op_m, rhs_m);
  TAU_MAPPING_PROFILE_STOP();
  // we could release the locks here instead of in the dtor.
}
    </screen>
  </refsect1>


  <refsect1>
    <title>See Also</title>
    <para>
      <xref linkend="TAU_MAPPING_PROFILE_TIMER" />,
      <xref linkend="TAU_MAPPING_PROFILE_STOP" />
    </para>
  </refsect1>

</refentry>

<refentry id="TAU_MAPPING_PROFILE_STOP">
  <refmeta>
    <refentrytitle>TAU_MAPPING_PROFILE_STOP</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv><refname>TAU_MAPPING_PROFILE_STOP</refname>
  <refpurpose>Stops a mapping timer</refpurpose></refnamediv>
  
  <refsynopsisdiv>
    <funcsynopsis><funcsynopsisinfo>C/C++:</funcsynopsisinfo>
    <funcprototype>
      <funcdef><function>TAU_MAPPING_PROFILE_STOP</function></funcdef>
      <paramdef>Profiler <parameter>timer</parameter></paramdef>
      <paramdef>int <parameter>tid</parameter></paramdef>
    </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>

  
  <refsect1><title>Description</title>
    <para><literal>TAU_MAPPING_PROFILE_STOP</literal> stops the
    timer that is created using
    <literal>TAU_MAPPING_PROFILE_TIMER</literal>. This will measure the
    elapsed time in groups of statements, instead of the entire block. A
    corresponding stop statement stops the timer as described next. The
    thread identifier is specified in the tid parameter.</para>
  </refsect1>
  
  <refsect1><title>Example</title>
    
    <para><emphasis role="bold">C/C++ :</emphasis></para>
    <screen>
template&lt;class LHS,class Op,class RHS,class EvalTag&gt;
void
ExpressionKernel&lt;LHS,Op,RHS,EvalTag&gt;::run() {
  TAU_MAPPING_PROFILE_TIMER(timer, TauMapFI);
  printf("ExpressionKernel::run() this = 4854\n", this);
  // Just evaluate the expression.
  
  TAU_MAPPING_PROFILE_START(timer);
  KernelEvaluator&lt;EvalTag&gt;().evaluate(lhs_m, op_m, rhs_m);
  TAU_MAPPING_PROFILE_STOP();
  // we could release the locks here instead of in the dtor.
}
    </screen>
  </refsect1>

  <refsect1>
    <title>See Also</title>
    <para>
      <xref linkend="TAU_MAPPING_PROFILE_TIMER" />,
      <xref linkend="TAU_MAPPING_PROFILE_START" />
    </para>
  </refsect1>

</refentry>


<refentry id="TAU_MAPPING_PROFILE_TIMER">
  <refmeta>
    <refentrytitle>TAU_MAPPING_PROFILE_TIMER</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv><refname>TAU_MAPPING_PROFILE_TIMER</refname>
  <refpurpose>Declares a mapping timer</refpurpose></refnamediv>
  
  <refsynopsisdiv>
    <funcsynopsis><funcsynopsisinfo>C/C++:</funcsynopsisinfo>
    <funcprototype>
      <funcdef><function>TAU_MAPPING_PROFILE_TIMER</function></funcdef>
      <paramdef>Profiler <parameter>timer</parameter></paramdef>
      <paramdef>FunctionInfo *<parameter>FuncIdVar</parameter></paramdef>
    </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>

  
  <refsect1><title>Description</title>
    <para><literal>TAU_MAPPING_PROFILE_TIMER</literal> enables timing
    of individual statements, instead of complete blocks. It will attribute
    the time to a higher-level statement. The second argument is the
    identifier of the statement that is obtained after
    <literal>TAU_MAPPING_OBJECT</literal> and
    <literal>TAU_MAPPING_LINK</literal> have executed. The timer argument in
    this macro is any variable that is used subsequently to start and stop
    the timer.</para>
  </refsect1>
  
  <refsect1><title>Example</title>
    
    <para><emphasis role="bold">C/C++ :</emphasis></para>
    <screen>
template&lt;class LHS,class Op,class RHS,class EvalTag&gt;
void
ExpressionKernel&lt;LHS,Op,RHS,EvalTag&gt;::run() {
  TAU_MAPPING_PROFILE_TIMER(timer, TauMapFI);
  printf("ExpressionKernel::run() this = 4854\n", this);
  // Just evaluate the expression.
  
  TAU_MAPPING_PROFILE_START(timer);
  KernelEvaluator&lt;EvalTag&gt;().evaluate(lhs_m, op_m, rhs_m);
  TAU_MAPPING_PROFILE_STOP();
  // we could release the locks here instead of in the dtor.
}
    </screen>
  </refsect1>

  <refsect1>
    <title>See Also</title>
    <para>
      <xref linkend="TAU_MAPPING_LINK" />,
      <xref linkend="TAU_MAPPING_OBJECT" />,
      <xref linkend="TAU_MAPPING_PROFILE_START" />,
      <xref linkend="TAU_MAPPING_PROFILE_STOP" />
    </para>
  </refsect1>

</refentry>



<!--



<refentry id="TAU_?">
<refmeta>
<refentrytitle>TAU_?</refentrytitle>
<manvolnum>3</manvolnum>
</refmeta>
  <refnamediv><refname>TAU_?</refname>
  <refpurpose>?</refpurpose></refnamediv>
  
  <refsynopsisdiv>
    <funcsynopsis><funcsynopsisinfo>C/C++:</funcsynopsisinfo>
    <funcprototype>
      <funcdef><function>TAU_?</function></funcdef>
      <paramdef>? <parameter>?</parameter></paramdef>
    </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>

  
  <refsect1><title>Description</title>
    <para>?</para>
  </refsect1>
  
  <refsect1><title>Example</title>
    
    <para><emphasis role="bold">C/C++ :</emphasis></para>
    <screen>
?
    </screen>
  </refsect1>
</refentry>



-->


</reference>
