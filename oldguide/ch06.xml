<chapter id="PerformanceDatabase">
  <title>Performance Database</title>

  <simplesect>PerfDB is a performance database tool related to the TAU
  framework. The PerfDB database is designed to store and provide access
  to TAU profile data. A number of utility programs have been written in
  Java to load the data into PerfDB and to query the data. With PerfDB,
  users can perform performance analyses such as regression analysis,
  scalability analysis across multiple trials, and so on. An unlimited
  number of comparative analyses are available through the PerfDB toolkit.
  Work is being done to provide the user with standard analysis tools, and
  an API has been developed to access the data with standard Java
  classes.</simplesect>

  <sect1 id="Prerequisites">
    <title>Prerequisites</title>

    <orderedlist>

      <listitem>PostgreSQL 7.0 (or an equivalent DBMS) PerfDB requires a
      DataBase Management System (DBMS). It has been tested with both
      PostgreSQL and MySQL databases. The default database is PostgreSQL
      (http://www.postgresql.org).</listitem>

      <listitem>Java 1.4 The PerfDB utilities and API are written in Java.</listitem>

    </orderedlist>

  </sect1>

  <sect1 id="Installation">
    <title>Installation</title>

    <para>PerfDB is installed as part of the standard TAU release. Shell
    scripts are installed in the TAU bin directory to run the configuration
    and loading utilities. It is assumed that the user has installed TAU and
    run TAU's configure and 'make install'.</para>

    <sect2>
      <title>Create a database</title>

      <para>Once a DBMS is installed, a database needs to be created.
      This database can be called anything the user likes -
      <literal>perfdb</literal> is the default. If the DBMS is PostgreSQL, the
      command from the shell prompt is:</para>

      <screen>
% createdb perfdb
</screen>

      <para>If the user is in psql, the command is:</para>

      <screen>
psql=# create database perfdb
</screen>

      <para>Other DBMS are similar.</para>

    </sect2>

    <sect2>
      <title>Build PerfDB</title>

      <para>Change directory to the $TAUROOT/tools/src/perfdb directory, and issue the command:</para>

      <screen>
% make
</screen>

    </sect2>

    <sect2>
      <title>Configuration</title>

      <para>PerfDB needs to be configured for the first time use. To configure PerfDB, run the command (assuming $TAUROOT/$arch/bin is in your path):</para>

      <screen>
% perfdb_configure
</screen>

      <para>The configure program will prompt the user for several
      values. The default values in all cases will work for 99.9% of users.
      Unless you need to specify something other than the default values (for
      example, if you are using MySQL instead of PostgreSQL, you need to
      specify a different JDBC .jar file, driver name, and database vendor).
      The only value for which there is no default is the database username.
      Enter the name of a database user which has administrative access.
      Because the utilities use the 'COPY'command with PostgreSQL, the user
      requires administrative access. Once the configuration program collects
      the information, it prompts for the user's database password, and
      connects to the database to test the configuration. If the configuration
      is valid, the database schema is loaded into the database.</para>

    </sect2>

    <sect2>
      <title>Loading database schema</title>

      <para>If the configuration ended successfully, then the database
      schema was loaded at the end of the configuration process. If problems
      occurred, then it may be necessary to load the database schema later. If
      that is the case, then the program to load the schema is:</para>

      <screen>
%  perfdb_loadschema
</screen>

    </sect2>
 
    <sect2>
      <title>Loading application data</title>

      <para>To load application data, simply run the perfdb_loadapp
      program which takes a parameter &lt;-x | --xmlfile&gt; filename : the
      name of the application data file. </para>

      <para>The xmlfile passed in is the application data file. A sample application data file is $TAUROOT/tools/src/perfdb/data/App_Info.xml. For e.g.,</para>

      <screen>
% perfdb_loadapp -x App_Info.xml
</screen>

      <para>The application loader will load the application, and return the ID of the application in the database.</para>

    </sect2>

    <sect2>
      <title>Loading experiment data</title>

      <para>To load experiment data, simply run the <literal>perfdb_loadexp</literal> program. It takes two parameters:</para>

      <para>&lt;-x | --xmlfile&gt; filename: the name of the experiment data file.</para>
 
      <para>&lt;-a | --applicationid&gt; value: the value of the application ID</para>

      <para>The xmlfile passed in is the experiment data file. A sample experiment data file is $TAUROOT/tools/src/perfdb/data/Exp_Info.xml. For e.g.,</para>

      <screen>
% perfdb_loadexp -x Exp_Info.xml - a 1
</screen>

      <para>The experiment loader will load the experiment, and return the ID of the experiment in the database.</para>

    </sect2>

    <sect2>
      <title>Translating TAU profiles</title>

      <para>TAU data needs to be translated to XML in order to be loaded
      into the database. This is a simple operation, performed with the
      perfdb_translate program. There are several parameters for
      perfdb_translate:</para>

      <para>&lt;-s | --sourcefile&gt; filename: the name of the TAU pprof dump format data file (created by pprof -d)</para>

      <para>&lt;-d | --destinationfile&gt; filename: the name of the XML output file</para>

      <para>&lt;-a | --applicationid&gt; value: the value of the application ID</para>

      <para>&lt;-e | --experimentid&gt; value: the value of the experiment ID</para>

      <para>For Example:</para>

      <screen>
% pprof -d &gt; pprof.dat
% perfdb_translate -s pprof.dat -d pprof.xml -a 1 -e 1
</screen>

    </sect2>

    <sect2>
      <title>Loading translated trial data</title>

      <para>Once the data has been translated, it can be loaded into the
      database. The data is loaded by running the perfdb_loadtrial command. It
      takes the following parameters:</para>

      <para>&lt;-x | --xmlfile&gt; filename: the name of the translated trial data file</para>

      <para>&lt; -t | --trialid&gt; value: the value of an existing trial ID</para>

      <para>&lt;-p | --problemfile&gt; filename: the name of a problem definition file</para>

      <para>&lt;-p | --problemfile&gt; filename: the name of a problem definition file</para>

      <para>perfdb_loadtrial can be run two ways. When creating a new
      trial, the user calls perfdb_loadtrial with an optional problem
      definition file. The problem definition file is a user-defined XML file
      that describes the trial data. An example problem definition file is in
      the data directory. For e.g.,</para>

      <screen>
% perfdb_loadtrial -x pprof.xml -p sample_problem.xml
</screen>

      <para>If the user is adding trial data to an existing trial (due to multiple metrics recorded during the run with TAU), then the problem file is omitted, and the trial ID is passed in:</para>

      <screen>
% perfdb_loadtrial -t 1
</screen>

      <para>Once the data has been loaded into the database, analysis can be performed. See the <literal>${TAUROOT}/tools/src/dms/README</literal> file for more details.</para>

    </sect2>

  </sect1>

</chapter>
